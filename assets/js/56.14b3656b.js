(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{417:function(t,_,a){"use strict";a.r(_);var r=a(45),v=Object(r.a)({},(function(){var t=this,_=t.$createElement,a=t._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"原型和原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型和原型链"}},[t._v("#")]),t._v(" 原型和原型链")]),t._v(" "),a("h2",{attrs:{id:"构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),a("p",[t._v("当一个函数使用 "),a("code",[t._v("new")]),t._v(" 关键字调用时，被称作构造函数。")]),t._v(" "),a("h2",{attrs:{id:"实例对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例对象"}},[t._v("#")]),t._v(" 实例对象")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("new")]),t._v(" 调用构造函数会返回一个对象，这个对象叫做实例对象")]),t._v(" "),a("h2",{attrs:{id:"原型对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型对象"}},[t._v("#")]),t._v(" 原型对象")]),t._v(" "),a("p",[t._v("构造函数的 "),a("code",[t._v("prototype")]),t._v(" 属性指向原型对象，实例的"),a("code",[t._v("[[Prototype]]")]),t._v("指针指向原型对象，在浏览器中可以通过"),a("code",[t._v("__proto__")]),t._v("属性进行访问原型对象。"),a("br"),t._v("\n原型对象的 "),a("code",[t._v("constructor")]),t._v(" 属性指向构造函数。")]),t._v(" "),a("h2",{attrs:{id:"原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),a("p",[t._v("实例对象的原型对象可以是另一个实例对象，另一个实例对象有它自己的原型对象，另一个实例对象的原型对象又可以是另一个实例，这样各个实例对象和原型对象之间就形成链条关系，称为原型链。")]),t._v(" "),a("p",[t._v("查找对象属性会先在当前对象上查找，如果查找不到会沿着原型链向上查找。")]),t._v(" "),a("p",[a("strong",[t._v("原型链的构建是通过将一个类型的实例赋值给另一个构造函数的原型实现的")]),t._v("。这样，子类型就能够访问超类型的所有属性和方法，这一点与基于类的继承很相似。")])])}),[],!1,null,null,null);_.default=v.exports}}]);