(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{446:function(t,s,a){"use strict";a.r(s);var e=a(45),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react-hook-api-notes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-hook-api-notes"}},[t._v("#")]),t._v(" React Hook API Notes")]),t._v(" "),a("p",[t._v("之前阅读了一些 Hook 概览后就开始写业务代码了，但是发现还是有很多细节没记住，掌握不牢，不知道等。于是“抄书”，写写笔记，便于快速复习。")]),t._v(" "),a("h2",{attrs:{id:"usestate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usestate"}},[t._v("#")]),t._v(" useState")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("setState")]),t._v(" 函数用于更新 "),a("code",[t._v("state")]),t._v("。它接收一个新的 "),a("code",[t._v("state")]),t._v(" 值并将组件的一次重新渲染加入队列。在后续的重新渲染中，"),a("code",[t._v("useState")]),t._v(" 返回的第一个值将始终是更新后最新的 "),a("code",[t._v("state")]),t._v("。")]),t._v(" "),a("li",[t._v("组件每次更新取到的 "),a("code",[t._v("state")]),t._v(" 和 "),a("code",[t._v("setState")]),t._v(" 都是当前这次渲染的 "),a("code",[t._v("state")]),t._v(" 和 "),a("code",[t._v("setState")]),t._v("。")]),t._v(" "),a("li",[t._v("当你使用 "),a("code",[t._v("state")]),t._v(" 时取到的就是当前这次更新的 "),a("code",[t._v("state")]),t._v(" ，在异步的回调中取到的也是它被创建的那次渲染时的 "),a("code",[t._v("state")]),t._v("，因为下一次渲染时的 "),a("code",[t._v("state")]),t._v(" 是下一个 "),a("code",[t._v("state")]),t._v("，而本次渲染在异步回调中保存的是本次渲染时的 "),a("code",[t._v("state")]),t._v("。")]),t._v(" "),a("li",[t._v("如果新的 "),a("code",[t._v("state")]),t._v(" 需要通过使用先前的 "),a("code",[t._v("state")]),t._v(" 计算得出，那么可以将函数传递给 "),a("code",[t._v("setState")]),t._v(" 。该函数将接收先前的 "),a("code",[t._v("state")]),t._v(" ，返回值作为新的值更新 "),a("code",[t._v("state")]),t._v(" 。")]),t._v(" "),a("li",[a("code",[t._v("initialState")]),t._v(" 参数只会在组件的初始渲染中起作用，后续渲染时会被忽略。如果初始 "),a("code",[t._v("state")]),t._v(" 需要通过复杂计算获得，则可以传入一个函数，在函数中计算并返回初始的 "),a("code",[t._v("state")]),t._v(" ，此函数只在初始渲染时被调用")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" initialState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("someExpensiveComputation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" initialState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"useeffect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useeffect"}},[t._v("#")]),t._v(" useEffect")]),t._v(" "),a("ul",[a("li",[t._v("组件每次更新，在渲染完成之后会进行清除上一次的 "),a("code",[t._v("useEffect")]),t._v(" 的操作，然后重新执行 "),a("code",[t._v("useEffect")]),t._v('，这个清除操作"只"是一个 effect hook 的机制，如想要执行具体的清除的操作，如取消订阅，清理定时器，取消请求等，需要在 '),a("code",[t._v("useEffect")]),t._v(" 返回一个函数，在这个返回的函数中处理具体的清理操作。")]),t._v(" "),a("li",[t._v("默认的，组件每次更新都会重新执行 "),a("code",[t._v("useEffect")]),t._v("，但是可以传入第二个参数，它是 "),a("code",[t._v("useEffect")]),t._v(" 的依赖项数组，控制 "),a("code",[t._v("useEffect")]),t._v(" 是否执行。组件更新时，只有在依赖项也发生变化时才会清除上一次 "),a("code",[t._v("useEffect")]),t._v(" 和 重新执行 "),a("code",[t._v("useEffect")]),t._v(" ，否则会跳过该次 "),a("code",[t._v("useEffect")]),t._v(" 的更新。传空数组 "),a("code",[t._v("[]")]),t._v(" 时则只会在第一次执行，后续更新都不会执行。所以，总结来说， "),a("code",[t._v("useEffect")]),t._v(" 是否更新（清除上一次和重新执行本次）取决于它的依赖项数组（没有依赖始终更新；有依赖则依赖项变化就更新，不变不更新；空数组只更新第一次）。")]),t._v(" "),a("li",[t._v("执行时机：在浏览器完成布局与绘制之后，传给 "),a("code",[t._v("useEffect")]),t._v(" 的函数会延迟调用。这使得它适用于许多常见的副作用场景，比如设置订阅和事件处理等情况，因此不应在函数中执行阻塞浏览器更新屏幕的操作。虽然 "),a("code",[t._v("useEffect")]),t._v(" 会在浏览器绘制后延迟执行，但会保证在任何新的渲染前执行。React 将在组件更新前刷新上一轮渲染的 effect。"),a("code",[t._v("useLayoutEffect")]),t._v(" 和 "),a("code",[t._v("useEffect")]),t._v(" 的结构相同，区别只是调用时机不同。它会在所有的 DOM 变更之后同步调用 effect。可以使用它来读取 DOM 布局并同步触发重渲染。在浏览器执行绘制之前，"),a("code",[t._v("useLayoutEffect")]),t._v(" 内部的更新计划将被同步刷新。")])]),t._v(" "),a("h2",{attrs:{id:"hook-规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hook-规则"}},[t._v("#")]),t._v(" Hook 规则")]),t._v(" "),a("h3",{attrs:{id:"_1、只在最顶层使用-hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、只在最顶层使用-hook"}},[t._v("#")]),t._v(" 1、只在最顶层使用 Hook")]),t._v(" "),a("p",[t._v("不要在循环，条件或嵌套函数中调用 Hook， 确保总是在你的 React 函数的最顶层调用他们。如果我们想要有条件地执行一个 effect，可以将判断放到 Hook 的内部.\nreact hook 在多次渲染中需要保证每次渲染时所有的 hook 的调用顺序是不变的，这可以让 React 知道哪个 "),a("code",[t._v("state")]),t._v(" 对应的是哪个 "),a("code",[t._v("useState")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("到这里其实我是有疑问的，为啥会产生这样的使用要求呢？是什么原因导致需要保证调用顺序一致呢？就如官方文档里的自问自答一样："),a("em",[t._v("“那么 React 怎么知道哪个 "),a("code",[t._v("state")]),t._v(" 对应哪个 "),a("code",[t._v("useState")]),t._v("？答案是 React 靠的是 Hook 调用的顺序。”")]),t._v("，为什么 React 不知道 "),a("code",[t._v("state")]),t._v(" 对应哪个 "),a("code",[t._v("useState")]),t._v("？又为什么需要知道呢？头大！后来简单了解了一下，好像和 Hook 的状态的保存和更新有关，React Hook 有它自己的设计，俺暂时还解释不了，以后弄懂了再说")])]),t._v(" "),a("h3",{attrs:{id:"_2、只在-react-函数中调用-hook-不要在普通的-javascript-函数中调用-hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、只在-react-函数中调用-hook-不要在普通的-javascript-函数中调用-hook"}},[t._v("#")]),t._v(" 2、只在 React 函数中调用 Hook，不要在普通的 JavaScript 函数中调用 Hook")]),t._v(" "),a("p",[t._v("Hook 可以这样使用：")]),t._v(" "),a("ul",[a("li",[t._v("在 React 的函数组件中调用 Hook")]),t._v(" "),a("li",[t._v("在自定义 Hook 中调用其他 Hook")])]),t._v(" "),a("h2",{attrs:{id:"自定义-hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义-hook"}},[t._v("#")]),t._v(" 自定义 Hook")]),t._v(" "),a("p",[a("strong",[t._v("自定义 Hook，可以将组件逻辑提取到可重用的函数中。")])]),t._v(" "),a("blockquote",[a("p",[t._v("当我们想在两个函数之间共享逻辑时，我们会把它提取到第三个函数中。而组件和 Hook 都是函数，所以也同样适用这种方式。")])]),t._v(" "),a("p",[t._v("至此，React 一共有三种方式共享（提取）组件间的公共状态逻辑:")]),t._v(" "),a("ul",[a("li",[t._v("render props")]),t._v(" "),a("li",[t._v("高阶组件（HOC）")]),t._v(" "),a("li",[t._v("自定义 Hook")])]),t._v(" "),a("h4",{attrs:{id:"在两个组件中使用相同的-hook-会共享-state-吗-获取的是独立的-state-吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在两个组件中使用相同的-hook-会共享-state-吗-获取的是独立的-state-吗"}},[t._v("#")]),t._v(" 在两个组件中使用相同的 Hook 会共享 state 吗？获取的是独立的 state 吗？")]),t._v(" "),a("p",[t._v("每次使用自定义 Hook 时，其中的所有 "),a("code",[t._v("state")]),t._v(" 和副作用都是完全隔离的；从 React 的角度来看，使用自定义 Hook 时只是调用了 "),a("code",[t._v("useState")]),t._v(" 和 "),a("code",[t._v("useEffect")]),t._v("，在多个组件中多次调用 "),a("code",[t._v("useState")]),t._v(" 和 "),a("code",[t._v("useEffect")]),t._v("，它们是完全独立的。")]),t._v(" "),a("h2",{attrs:{id:"usecontext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usecontext"}},[t._v("#")]),t._v(" useContext")]),t._v(" "),a("blockquote",[a("p",[t._v("const AppContext = React.createContext(defaultValue);")])]),t._v(" "),a("ul",[a("li",[t._v("接收一个 "),a("code",[t._v("context")]),t._v(" 对象并返回 "),a("code",[t._v("context")]),t._v(" 的当前值："),a("code",[t._v("const appContextValue = useContext(AppContext)")])]),t._v(" "),a("li",[t._v("当前的 "),a("code",[t._v("context")]),t._v(" 值由上层组件中距离当前组件最近的 "),a("code",[t._v("<MyContext.Provider>")]),t._v(" 的 "),a("code",[t._v("value")]),t._v(" prop 决定。")]),t._v(" "),a("li",[t._v("当组件上层最近的 "),a("code",[t._v("<MyContext.Provider>")]),t._v(" 更新时，该 Hook 会触发重渲染，并使用 "),a("code",[t._v("<MyContext.Provider>")]),t._v(" 的 "),a("code",[t._v("value")]),t._v(" 属性的最新值。")]),t._v(" "),a("li",[t._v("调用了 "),a("code",[t._v("useContext")]),t._v(" 的组件总会在它返回的 "),a("code",[t._v("context")]),t._v(" 当前值变化时重新渲染。")])]),t._v(" "),a("h2",{attrs:{id:"usereducer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usereducer"}},[t._v("#")]),t._v(" useReducer")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dispatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useReducer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reducer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" initialArg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"惰性初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#惰性初始化"}},[t._v("#")]),t._v(" 惰性初始化")]),t._v(" "),a("p",[t._v("你可以选择惰性地创建初始 "),a("code",[t._v("state")]),t._v("。为此，需要将 "),a("code",[t._v("init")]),t._v(" 函数作为 "),a("code",[t._v("useReducer")]),t._v(" 的第三个参数传入，这样初始 "),a("code",[t._v("state")]),t._v(" 将被设置为 "),a("code",[t._v("init(initialArg)")]),t._v("。\n这么做可以将用于计算 "),a("code",[t._v("state")]),t._v(" 的逻辑提取到 "),a("code",[t._v("reducer")]),t._v(" 外部，这也为将来对重置 "),a("code",[t._v("state")]),t._v(" 的 "),a("code",[t._v("action")]),t._v(" 做处理提供了便利。")]),t._v(" "),a("h3",{attrs:{id:"跳过-dispatch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跳过-dispatch"}},[t._v("#")]),t._v(" 跳过 dispatch")]),t._v(" "),a("p",[t._v("如果 Reducer Hook 的返回值与当前 "),a("code",[t._v("state")]),t._v(" 相同，React 将跳过子组件的渲染及副作用的执行。")]),t._v(" "),a("h2",{attrs:{id:"usecallback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usecallback"}},[t._v("#")]),t._v(" useCallback")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" memoizedCallback "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomething")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("返回一个 memoized 回调函数。")]),t._v(" "),a("li",[a("code",[t._v("useCallback")]),t._v(" 返回 参数函数的 memoized 的版本，只有当依赖改变时返回的函数才会更新，这在把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 "),a("code",[t._v("shouldComponentUpdate")]),t._v("）的子组件时非常有用。")])]),t._v(" "),a("h2",{attrs:{id:"usememo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usememo"}},[t._v("#")]),t._v(" useMemo")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" memoizedValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useMemo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("computeExpensiveValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("返回一个 memoized 值。")]),t._v(" "),a("li",[t._v("把“创建”函数和依赖项数组作为参数传入 "),a("code",[t._v("useMemo")]),t._v("，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。")]),t._v(" "),a("li",[t._v("传入 "),a("code",[t._v("useMemo")]),t._v(" 的函数会在渲染期间执行。不要在这个函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 "),a("code",[t._v("useEffect")]),t._v(" 的适用范畴，而不是 "),a("code",[t._v("useMemo")]),t._v("。")]),t._v(" "),a("li",[t._v("如果没有提供依赖项数组，"),a("code",[t._v("useMemo")]),t._v(" 在每次渲染时都会计算新的值。")])]),t._v(" "),a("h2",{attrs:{id:"refs-dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#refs-dom"}},[t._v("#")]),t._v(" Refs & DOM")]),t._v(" "),a("p",[t._v("Refs 对象是通过 "),a("code",[t._v("React.createRef()")]),t._v(" 创建的，一般是赋值给 "),a("code",[t._v("render")]),t._v("方法中的 "),a("strong",[t._v("jsx 的 DOM 元素")]),t._v(" 或者 "),a("strong",[t._v("类组件实例")]),t._v(" 的 "),a("code",[t._v("ref")]),t._v(" 属性，来保存对 DOM 元素或者组件实例的引用，此时该引用保存在 Refs 对象的 "),a("code",[t._v("current")]),t._v(" 属性上。")]),t._v(" "),a("ul",[a("li",[t._v("当 "),a("code",[t._v("ref")]),t._v(" 属性用于 HTML 元素时，构造函数中使用 "),a("code",[t._v("React.createRef()")]),t._v(" 创建的 Ref 对象接收底层 DOM 元素作为其 "),a("code",[t._v("current")]),t._v(" 属性。")]),t._v(" "),a("li",[t._v("当 "),a("code",[t._v("ref")]),t._v(" 属性用于自定义 class 组件时，Ref 对象接收组件的挂载实例作为其 "),a("code",[t._v("current")]),t._v(" 属性。")]),t._v(" "),a("li",[t._v("由于 Refs 对象保存的是 DOM 元素或者类组件实例，因此，你不能在函数组件"),a("strong",[t._v("上")]),t._v("使用 ref 属性，因为他们没有实例。（即： Refs 对象不能保存函数式组件的引用，在函数式组件上（注意不是函数式组件内，别搞混淆）使用 ref 属性没有用，估计也会报错，我没有试过）")]),t._v(" "),a("li",[t._v("通常会把 Refs 对象赋值给组件实例属性，以便可以在整个组件中引用它们。")])]),t._v(" "),a("h3",{attrs:{id:"如果要在函数组件中使用-ref-可以使用forwardref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果要在函数组件中使用-ref-可以使用forwardref"}},[t._v("#")]),t._v(" 如果要在函数组件"),a("strong",[t._v("中")]),t._v("使用 ref，可以使用"),a("strong",[t._v("forwardRef")])]),t._v(" "),a("p",[t._v("forwardRef 即 Refs 转发。Ref 转发是一个可选特性，其允许某些组件接收 ref，并将其向下传递（换句话说，“转发”它）给子组件。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FancyButton "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forwardRef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button ref"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("ref"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" className"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'FancyButton'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以直接获取 DOM button 的 ref：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ref "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createRef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("FancyButton ref"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("ref"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("Click me"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("FancyButton"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("逐步解释一下上面的代码：")]),t._v(" "),a("ol",[a("li",[t._v("通过调用 "),a("code",[t._v("React.createRef")]),t._v(" 创建了一个"),a("strong",[t._v("React Ref")]),t._v("对象 并将其赋值给 "),a("code",[t._v("ref")]),t._v(" 变量。")]),t._v(" "),a("li",[t._v("通过指定 "),a("code",[t._v("ref")]),t._v(" 变量 为 JSX 的 "),a("code",[t._v("ref")]),t._v(" 属性，将其向下传递给 "),a("code",[t._v("<FancyButton ref={ref}>")]),t._v("。")]),t._v(" "),a("li",[t._v("React 传递 "),a("code",[t._v("ref")]),t._v("变量（即 Ref 对象）给 "),a("code",[t._v("forwardRef")]),t._v(" 内函数 "),a("code",[t._v("(props, ref) => ...")]),t._v("，作为其第二个参数。")]),t._v(" "),a("li",[t._v("我们向下转发该 "),a("code",[t._v("ref")]),t._v("（即 Ref 对象）参数到 "),a("code",[t._v("<button ref={ref}>")]),t._v("，将其指定为 JSX 的 "),a("code",[t._v("ref")]),t._v(" 属性。")]),t._v(" "),a("li",[t._v("当 Ref 挂载完成，"),a("code",[t._v("ref.current")]),t._v("(变量 ref 的 current 属性) 将指向 "),a("code",[t._v("<button>")]),t._v(" DOM 节点。")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("第二个参数 "),a("code",[t._v("ref")]),t._v(" 只在使用 "),a("code",[t._v("React.forwardRef")]),t._v(" 定义组件时存在。常规函数和 class 组件不接收 "),a("code",[t._v("ref")]),t._v(" 参数，且 props 中也不存在 "),a("code",[t._v("ref")]),t._v("。")])]),t._v(" "),a("li",[a("strong",[t._v("Ref 转发不仅限于 DOM 组件，你也可以转发 Refs 到 class 组件实例中。")])]),t._v(" "),a("li",[a("strong",[t._v("在高阶组件上使用 ref 属性时需要注意，正常情况下 ref 属性指向的是高阶组件本身而不是高阶组件包裹的组件，因此想转发 Ref 对象到高阶组件包裹的组件内部时，需要使用 Ref 转发。")])])]),t._v(" "),a("h3",{attrs:{id:"回调-refs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回调-refs"}},[t._v("#")]),t._v(" 回调 Refs")]),t._v(" "),a("p",[t._v("回调 Refs 是将一个回调函数作为 "),a("code",[t._v("ref")]),t._v(" 属性的值，这个回调函数接受 React 组件实例或者 DOM 元素作为参数。而回调函数可以灵活地进行传递，因此可以在父级组件创建并向子组件进行传递回调函数，这样父组件可以在回调函数内获取子组件 DOM 元素的引用。回调 Refs 也可以直接在当前组件使用。")]),t._v(" "),a("ul",[a("li",[t._v("React 将在组件挂载时，调用赋值给 "),a("code",[t._v("ref")]),t._v(" 属性的回调函数并传入 DOM 元素，当卸载时调用它并传入 "),a("code",[t._v("null")]),t._v("。在 "),a("code",[t._v("componentDidMount")]),t._v(" 或 "),a("code",[t._v("componentDidUpdate")]),t._v(" 触发前，React 会保证 Refs 一定是最新的(即回调函数传入的 DOM 元素是最新的)。")])]),t._v(" "),a("h2",{attrs:{id:"useref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useref"}},[t._v("#")]),t._v(" useRef")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" refContainer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useRef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initialValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("useRef")]),t._v(" 返回一个可变的 Ref 对象，其 "),a("code",[t._v(".current")]),t._v(" 属性被初始化为传入的参数（initialValue）。")]),t._v(" "),a("li",[t._v("返回的 Ref 对象在组件的整个生命周期内保持不变。")]),t._v(" "),a("li",[t._v("返回的 Ref 对象是一个普通 js 对象，可以保存任何值，且每次渲染返回的都是同一个 Ref 对象。")]),t._v(" "),a("li",[t._v("当 Ref 对象内容发生变化时，"),a("code",[t._v("useRef")]),t._v(" 并不会通知你。变更 "),a("code",[t._v(".current")]),t._v(" 属性不会引发组件重新渲染。如果想要在 React 绑定或解绑 DOM 节点的 ref 时运行某些代码，则需要使用回调 Ref 来实现。")])]),t._v(" "),a("h2",{attrs:{id:"useimperativehandle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useimperativehandle"}},[t._v("#")]),t._v(" useImperativeHandle")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useImperativeHandle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ref"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" createHandle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("deps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("useImperativeHandle")]),t._v(" 可以让你在使用 Ref 时自定义暴露给父组件的实例值。在大多数情况下，应当避免使用 Ref 这样的命令式代码。"),a("code",[t._v("useImperativeHandle")]),t._v(" 应当与 "),a("code",[t._v("forwardRef")]),t._v(" 一起使用：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FancyInput")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" inputRef "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useRef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useImperativeHandle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ref"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("focus")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      inputRef"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("focus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input ref"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("inputRef"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nFancyInput "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forwardRef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FancyInput"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在本例中，渲染 "),a("code",[t._v("<FancyInput ref={inputRef} />")]),t._v(" 的父组件可以调用 "),a("code",[t._v("inputRef.current.focus()")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"uselayouteffect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uselayouteffect"}},[t._v("#")]),t._v(" useLayoutEffect")]),t._v(" "),a("p",[a("code",[t._v("useLayoutEffect")]),t._v(" 与 "),a("code",[t._v("useEffect")]),t._v(" 的使用方式相同，区别在于 2 者接受的回调函数（即 effect）的执行时机不同。\n"),a("code",[t._v("useLayoutEffect")]),t._v(" ：会在所有的 DOM 变更之后同步调用 effect，它与 "),a("code",[t._v("componentDidMount")]),t._v("、"),a("code",[t._v("componentDidUpdate")]),t._v(" 的调用阶段是一样的。可以使用它来读取 DOM 布局并同步触发重渲染(render)。在浏览器执行绘制之前，"),a("code",[t._v("useLayoutEffect")]),t._v(" 内部的更新计划将被同步刷新。\n"),a("code",[t._v("useEffect")]),t._v(" ：传给 "),a("code",[t._v("useEffect")]),t._v(" 的函数会延迟到在浏览器完成布局与绘制之后调用，但会保证在任何新的渲染前执行。React 将在组件更新前刷新上一轮渲染的 effect。\n大概的执行顺序如下：\n同步执行 js（也可能异步）-> 生成 VDom -> 挂载真实 DOM -> 执行 "),a("code",[t._v("useLayoutEffect")]),t._v(" 的 effect -> 浏览器布局和绘制 -> 执行 "),a("code",[t._v("useEffect")]),t._v(" 的 effect(会在下一个事件循环执行)")]),t._v(" "),a("h2",{attrs:{id:"usedebugvalue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usedebugvalue"}},[t._v("#")]),t._v(" useDebugValue")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useDebugValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("useDebugValue")]),t._v(" 可用于在 React 开发者工具中显示自定义 hook 的标签。\n使用示例：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useFriendStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("friendID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("isOnline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" setIsOnline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在开发者工具中的这个 Hook 旁边显示标签")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// e.g. "FriendStatus: Online"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useDebugValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isOnline "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Online'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Offline'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" isOnline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"延迟格式化-debug-值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#延迟格式化-debug-值"}},[t._v("#")]),t._v(" 延迟格式化 debug 值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useDebugValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toDateString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("useDebugValue")]),t._v(" 接受一个格式化函数作为可选的第二个参数。该函数只有在 Hook 被检查时才会被调用。它接受 debug 值作为参数，并且会返回一个格式化的显示值。\n个人理解就是避免这样使用 "),a("code",[t._v("useDebugValue")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useDebugValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toDateString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);